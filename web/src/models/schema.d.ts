/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/accounts/liquiditytypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Liquidity Types
         * @description Retrieves all available account liquidity types
         */
        get: operations["get_account_liquidity_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/accounts/types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account Types
         * @description Retrieves all available account types
         */
        get: operations["get_account_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search assets
         * @description Query to search shared assets. Returns a page of results.
         *     If not query parameters are provided, returns results sorted by most popular.
         *     The equivalent search endpoint for the user assets is not provided, as user
         *     assets can be retrieved in full due to it being a small subset.
         */
        get: operations["search_assets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/:asset_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get asset
         * @description Gets a shared asset.
         */
        get: operations["get_asset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/:asset_id/:reference_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get asset pair
         * @description Gets asset pair and its metadata.
         */
        get: operations["get_asset_pair"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/assets/:asset_id/:reference_id/rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get asset pair rates
         * @description Gets asset pair rates based on provided query params
         */
        get: operations["get_asset_pair_rates"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate
         * @description Posting login details to this query will return an authentication token used in most of the requests.
         */
        post: operations["post_login_details"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Account
         * @description Adds a new account to the user.
         */
        post: operations["add_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/accounts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Accounts
         * @description Gets all accounts and its metadata associated with user
         */
        get: operations["get_accounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/accounts/:account_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Account
         * @description Gets a specific account of the user with metadata.
         */
        get: operations["get_account"];
        /**
         * Update Account
         * @description Updates a specific account of the user with metadata.
         */
        put: operations["update_account"];
        post?: never;
        /**
         * Delete Account
         * @description Marks account as inactive so that its unavailable anymore.
         */
        delete: operations["delete_account"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/assets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add user asset
         * @description Adds a user defined asset.
         */
        post: operations["post_custom_asset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/assets/:asset_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user asset
         * @description Gets an custom asset added by user
         */
        get: operations["get_user_asset"];
        /**
         * Update user asset
         * @description Update already existing user defined asset.
         */
        put: operations["put_custom_asset"];
        post?: never;
        /**
         * Delete user asset
         * @description Deletes manually added user asset along with all the related information about it.
         *     Return an error if the asset is in use or other assets are dependent on it as base.
         */
        delete: operations["delete_asset"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/assets/:asset_id/:reference_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user asset pair
         * @description Gets metadata about user asset pair
         */
        get: operations["get_user_asset_pair"];
        put?: never;
        post?: never;
        /**
         * Delete user asset pair
         * @description Deletes user asset pair and its associated metadata.
         */
        delete: operations["delete_asset_pair"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/assets/:asset_id/:reference_id/rates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user asset pair rates
         * @description Gets user asset pair rates based on provided query params
         */
        get: operations["get_user_asset_pair_rates"];
        put?: never;
        /**
         * Add user asset pair rates
         * @description Adds a list of user asset pair rates. The list may contain one or many elements.
         *     If the rate already exists, error will be returned.
         */
        post: operations["post_custom_asset_rates"];
        /**
         * Delete user asset pair rates
         * @description Request with no parameters deletes all rates related to a user asset and its pair.
         *     If the parameters are specified, it deletes only the subset of it.
         */
        delete: operations["delete_asset_pair_rates"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/assets/:asset_id/:reference_id/usermetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update user asset pair metadata
         * @description Change the metadata related to user asset pair.
         *     As user asset pair is not uniquely identifiable we do not need a POST to create it.
         *     It is created by default as you add rates, and this endpoint serves as a way to add or update metadata.
         */
        put: operations["put_custom_asset_pair"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/portfolio/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Net Worth History
         * @description Returns a list of net worth of an user at specific points in time, depending on the range provided.
         */
        get: operations["get_networth_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/portfolio/holdings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Holdings
         * @description Returns a list of assets that user holds and their current value.
         */
        get: operations["get_holdings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/portfolio/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Portfolio Overview
         * @description Retunrs information about the entire portfolio and statistics such as gains/losses
         */
        get: operations["get_portfolio_overview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all
         * @description Retrieves a list of all individual and grouped transactions
         */
        get: operations["get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/transactions/:transaction_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing
         * @description This is a generic update endpoint which does not assume whether transaction is individual or group.
         *     It only updates the contents of the transaction without moving it.
         */
        put: operations["Update an existing transaction."];
        post?: never;
        /**
         * Delete existing
         * @description Deleted any transaction, whether its individual or from a group.
         */
        delete: operations["Delete an existing transaction."];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/transactions/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all
         * @description Retrieves a list of all individual transactions
         */
        get: operations["get"];
        put?: never;
        /**
         * Add new
         * @description Adds a group of transactions with metadata related to all of them.
         */
        post: operations["add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/transactions/groups/:group_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update existing
         * @description If the transactions array is updated with an existing transaction id, that transaction will
         *     be moved from individual to a group.
         */
        put: operations["update"];
        post?: never;
        /**
         * Delete existing
         * @description Deletes the entire transaction group and associated transactions within it.
         */
        delete: operations["Delete an existing transaction group."];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/transactions/individual": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all
         * @description Retrieves a list of all individual transactions
         */
        get: operations["get"];
        put?: never;
        /**
         * Add new
         * @description Adds a new individual transaction.
         */
        post: operations["add"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/:user_id/transactions/individual/:transaction_id": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Single
         * @description Retrieves a single transaction by specified id
         */
        get: operations["get_single"];
        /**
         * Update existing
         * @description Performs an update of an individual transaction.
         *     If the transaction provided is not individual, it will be moved to individual and removed from other group.
         */
        put: operations["Update an existing individual transaction."];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccountAssetEntryViewModel: {
            /**
             * Format: uuid
             * @description The id of an account for which to the entry is related.
             */
            account_id: string;
            /**
             * Format: double
             * @description The number of units of the asset that were added or removed from the account.
             */
            amount: number;
            /**
             * Format: int32
             * @description The id of an asset in the account for which the entry is related.
             */
            asset_id: number;
        };
        AccountFeesViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AccountFeesViewModelWithType: components["schemas"]["AccountFeesViewModel"] & {
            /** @enum {string} */
            type: "account_fees";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "account_fees";
        };
        AccountFeesWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AccountFeesWithIdentifiableEntriesViewModelWithType: components["schemas"]["AccountFeesWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "account_fees";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "account_fees";
        };
        AccountMetadataLookupTables: {
            account_liquidity_types: components["schemas"]["IdentifiableAccountLiquidityTypeViewModel"][];
            account_types: components["schemas"]["IdentifiableAccountTypeViewModel"][];
        };
        AccountTypeViewModel: {
            /** @description The name of the Account type */
            name: string;
        };
        AccountViewModel: {
            /** Format: int32 */
            account_type: number;
            name: string;
        };
        AddAccountRequestViewModel: components["schemas"]["AccountViewModel"] & {
            /** Format: int32 */
            liquidity_type: number;
        };
        AddAccountResponseViewModel: components["schemas"]["IdentifiableAccountViewModel"] & {
            /** Format: int32 */
            liquidity_type: number;
        };
        AddAssetPairRatesRequestViewModel: {
            rates: components["schemas"]["AssetRateViewModel"][];
        };
        AddAssetPairRatesResponseViewModel: {
            rates: components["schemas"]["AssetRateViewModel"][];
        };
        AddAssetRequestViewModel: components["schemas"]["AssetViewModel"] & {
            /** Format: int32 */
            base_asset_id: number;
        };
        AddAssetResponseViewModel: components["schemas"]["IdentifiableAssetViewModel"] & {
            /** Format: int32 */
            base_asset_id: number;
        };
        AddIndividualTransactionRequestViewModel: {
            transaction: components["schemas"]["TransactionWithEntries"];
        };
        AddIndividualTransactionResponseViewModel: {
            transaction: components["schemas"]["MandatoryIdentifiableTransactionWithIdentifiableEntries"];
        };
        AddTransactionGroupRequestViewModel: components["schemas"]["TransactionGroupViewModel"] & Record<string, never>;
        AddTransactionGroupResponseViewModel: components["schemas"]["MetadataLookupTables"] & {
            group: components["schemas"]["MandatoryIdentifiableTransactionGroupViewModel"];
        };
        AssetBalanceTransferViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            incoming_change: components["schemas"]["AccountAssetEntryViewModel"];
            outgoing_change: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetBalanceTransferViewModelWithType: components["schemas"]["AssetBalanceTransferViewModel"] & {
            /** @enum {string} */
            type: "asset_balance_transfer";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_balance_transfer";
        };
        AssetBalanceTransferWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            incoming_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            outgoing_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetBalanceTransferWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetBalanceTransferWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_balance_transfer";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_balance_transfer";
        };
        AssetDividendViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetDividendViewModelWithType: components["schemas"]["AssetDividendViewModel"] & {
            /** @enum {string} */
            type: "asset_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_dividend";
        };
        AssetDividendWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_dividend";
        };
        AssetLookupTables: {
            asset_types: components["schemas"]["IdentifiableAssetTypeViewModel"][];
        };
        AssetMetadataViewModel: {
            /**
             * Format: int32
             * @description Id of the asset paired to this asset by default.
             * @example 2
             */
            base_asset_id: number;
            /**
             * @description Ids of available second assets paired to this asset.
             * @example [
             *       2,
             *       4
             *     ]
             */
            pairs: number[];
        };
        AssetPairMetadataViewModel: {
            /** Format: date-time */
            last_updated: string;
            /**
             * Format: double
             * @example 42.57
             */
            latest_rate: number;
        };
        AssetPortfolioPositionViewModel: {
            /** Format: date-time */
            add_date: string;
            /** Format: double */
            add_price: number;
            /** Format: double */
            amount_left: number;
            /** Format: double */
            amount_sold: number;
            /** Format: double */
            fees: number;
            is_dividend: boolean;
            /** Format: double */
            quantity_added: number;
            /** Format: double */
            realized_gains: number;
            /** Format: double */
            sale_proceeds: number;
            /** Format: double */
            total_cost_basis: number;
            /** Format: double */
            total_gains: number;
            /** Format: double */
            unit_cost_basis: number;
            /** Format: double */
            unrealized_gains: number;
        };
        AssetPortfolioViewModel: {
            /** Format: uuid */
            account_id: string;
            /** Format: int32 */
            asset_id: number;
            /** Format: double */
            cash_dividends: number;
            positions: components["schemas"]["AssetPortfolioPositionViewModel"][];
            /** Format: double */
            realized_gains: number;
            /** Format: double */
            total_cost_basis: number;
            /** Format: double */
            total_fees: number;
            /** Format: double */
            total_gains: number;
            /** Format: double */
            total_units: number;
            /** Format: double */
            unit_cost_basis: number;
            /** Format: double */
            unrealized_gains: number;
        };
        AssetPurchaseViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            cash_outgoings_change: components["schemas"]["AccountAssetEntryViewModel"];
            purchase_change: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetPurchaseViewModelWithType: components["schemas"]["AssetPurchaseViewModel"] & {
            /** @enum {string} */
            type: "asset_purchase";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_purchase";
        };
        AssetPurchaseWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            cash_outgoings_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            purchase_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetPurchaseWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetPurchaseWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_purchase";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_purchase";
        };
        /** @example {
         *       "date": "2000-03-22T23:00:00Z",
         *       "rate": "12709.75"
         *     } */
        AssetRateViewModel: {
            /** Format: date-time */
            date: string;
            /** Format: double */
            rate: number;
        };
        AssetSaleViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            proceeds_entry: components["schemas"]["AccountAssetEntryViewModel"];
            sale_entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetSaleViewModelWithType: components["schemas"]["AssetSaleViewModel"] & {
            /** @enum {string} */
            type: "asset_sale";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_sale";
        };
        AssetSaleWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            proceeds_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            sale_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetSaleWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetSaleWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_sale";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_sale";
        };
        AssetTradeViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            incoming_entry: components["schemas"]["AccountAssetEntryViewModel"];
            outgoing_entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetTradeViewModelWithType: components["schemas"]["AssetTradeViewModel"] & {
            /** @enum {string} */
            type: "asset_trade";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_trade";
        };
        AssetTradeWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            incoming_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            outgoing_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetTradeWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetTradeWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_trade";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_trade";
        };
        AssetTransferInViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetTransferInViewModelWithType: components["schemas"]["AssetTransferInViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_in";
        };
        AssetTransferInWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_in";
        };
        AssetTransferOutViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        AssetTransferOutViewModelWithType: components["schemas"]["AssetTransferOutViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_out";
        };
        AssetTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        AssetTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["AssetTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_out";
        };
        AssetViewModel: {
            /** Format: int32 */
            asset_type: number;
            /** @example Intel */
            name: string;
            /** @example INTC */
            ticker: string;
        };
        /** @example {
         *       "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIyMzk2NDgwZi0wMDUyLTRjZjAtODFkYy04Y2VkYmRlNWNlMTMiLCJyb2xlIjoiQWRtaW4iLCJleHAiOjE3MDg4MTYxNzV9.bMzXp5J-_xEmOZE63Ffo0KsCIa4cqDw7Ry4fhWpWyRw"
         *     } */
        AuthViewModel: {
            /** @description The JWT bearer authentication token. */
            token: string;
        };
        CashDividendViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
            /**
             * Format: int32
             * @description An id of a cash asset for which the dividends were paid for.
             */
            origin_asset_id: number;
        };
        CashDividendViewModelWithType: components["schemas"]["CashDividendViewModel"] & {
            /** @enum {string} */
            type: "cash_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_dividend";
        };
        CashDividendWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            /**
             * Format: int32
             * @description An id of a cash asset for which the dividends were paid for.
             */
            origin_asset_id: number;
        };
        CashDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["CashDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_dividend";
        };
        CashPortfolioViewModel: {
            /** Format: uuid */
            account_id: string;
            /** Format: int32 */
            asset_id: number;
            /** Format: double */
            dividends: number;
            /** Format: double */
            fees: number;
            /** Format: double */
            units: number;
        };
        CashTransferInViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        CashTransferInViewModelWithType: components["schemas"]["CashTransferInViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_in";
        };
        CashTransferInWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        CashTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["CashTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_in";
        };
        CashTransferOutViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        CashTransferOutViewModelWithType: components["schemas"]["CashTransferOutViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_out";
        };
        CashTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        CashTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["CashTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_out";
        };
        ExpandedAccountViewModel: {
            account_type: components["schemas"]["IdentifiableAccountTypeViewModel"];
            name: string;
        };
        ExpandedAssetViewModel: {
            asset_type: components["schemas"]["IdentifiableAssetTypeViewModel"];
            /** @example Intel */
            name: string;
            /** @example INTC */
            ticker: string;
        };
        GetAccountLiquidityTypesResponseViewModel: {
            account_liquidity_types: components["schemas"]["IdentifiableAccountLiquidityTypeViewModel"][];
        };
        GetAccountResponseViewModel: components["schemas"]["ExpandedAccountViewModel"] & {
            liquidity_type: components["schemas"]["IdentifiableAccountLiquidityTypeViewModel"];
        };
        GetAccountTypesResponseViewModel: {
            account_types: components["schemas"]["IdentifiableAccountTypeViewModel"][];
        };
        GetAccountsResponseViewModel: {
            accounts: components["schemas"]["GetAccountsResponseViewModelRow"][];
            lookup_tables: components["schemas"]["AccountMetadataLookupTables"];
        };
        GetAccountsResponseViewModelRow: components["schemas"]["IdentifiableAccountViewModel"] & {
            /** Format: int32 */
            liquidity_type: number;
        };
        GetAssetPairRatesResponseViewModel: {
            /** @example 1d */
            range: string;
            rates: components["schemas"]["AssetRateViewModel"][];
        };
        GetAssetPairResponseViewModel: {
            main_asset: components["schemas"]["ExpandedAssetViewModel"];
            metadata: components["schemas"]["SharedAssetPairMetadataViewModel"];
            reference_asset: components["schemas"]["ExpandedAssetViewModel"];
        };
        GetAssetResponseViewModel: components["schemas"]["ExpandedAssetViewModel"] & components["schemas"]["AssetMetadataViewModel"] & Record<string, never>;
        GetAssetsLineResponseViewModel: components["schemas"]["IdentifiableAssetViewModel"] & Record<string, never>;
        GetHoldingsResponseViewModel: {
            holdings: components["schemas"]["GetHoldingsResponseViewModelRow"][];
            lookup_tables: components["schemas"]["HoldingsMetadataLookupTables"];
        };
        GetHoldingsResponseViewModelRow: {
            /** Format: uuid */
            account_id: string;
            /** Format: int32 */
            asset_id: number;
            /** Format: double */
            units: number;
            /** Format: double */
            value?: number | null;
        };
        GetIndividualTransactionViewModel: {
            lookup_tables: components["schemas"]["MetadataLookupTables"];
            transaction: components["schemas"]["MandatoryTransactionWithIdentifiableEntries"];
        };
        GetIndividualTransactionsViewModel: components["schemas"]["MetadataLookupTables"] & {
            transactions: components["schemas"]["MandatoryIdentifiableTransactionWithIdentifiableEntries"][];
        };
        GetNetWorthHistoryResponseViewModel: {
            /** @example 1d */
            range: string;
            sums: components["schemas"]["AssetRateViewModel"][];
        };
        GetPortfolioOverviewViewModel: {
            lookup_tables: components["schemas"]["HoldingsMetadataLookupTables"];
            portfolios: components["schemas"]["PortfolioOverviewViewModel"];
        };
        GetTransactionGroupsViewModel: components["schemas"]["MetadataLookupTables"] & {
            groups: components["schemas"]["MandatoryIdentifiableTransactionGroupViewModel"][];
        };
        GetTransactionsViewModel: components["schemas"]["MetadataLookupTables"] & {
            individual_transactions: components["schemas"]["MandatoryIdentifiableTransactionWithIdentifiableEntries"][];
            transaction_groups: components["schemas"]["MandatoryIdentifiableTransactionGroupViewModel"][];
        };
        GetUserAssetPairResponseViewModel: {
            main_asset: components["schemas"]["ExpandedAssetViewModel"];
            metadata: components["schemas"]["AssetPairMetadataViewModel"];
            reference_asset: components["schemas"]["ExpandedAssetViewModel"];
            user_metadata: components["schemas"]["UserAssetPairMetadataViewModel"];
        };
        HoldingsMetadataLookupTables: {
            accounts: components["schemas"]["IdentifiableAccountViewModel"][];
            assets: components["schemas"]["IdentifiableAssetViewModel"][];
        };
        IdentifiableAccountAssetEntryViewModel: components["schemas"]["AccountAssetEntryViewModel"] & {
            /**
             * Format: int32
             * @description Id representing a single entry in a transaction.
             */
            entry_id?: number | null;
        };
        IdentifiableAccountFeesWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAccountFeesWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAccountFeesWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "account_fees";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "account_fees";
        };
        IdentifiableAccountLiquidityTypeViewModel: {
            /**
             * Format: int32
             * @description The id of the Account type
             */
            id: number;
            /** @description The name of the Account type */
            name: string;
        };
        IdentifiableAccountTypeViewModel: {
            /**
             * Format: int32
             * @description The id of the Account type
             */
            id: number;
            /** @description The name of the Account type */
            name: string;
        };
        IdentifiableAccountViewModel: components["schemas"]["AccountViewModel"] & {
            /** Format: uuid */
            account_id: string;
        };
        IdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            incoming_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            outgoing_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_balance_transfer";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_balance_transfer";
        };
        IdentifiableAssetDividendWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_dividend";
        };
        IdentifiableAssetPurchaseWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            cash_outgoings_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            purchase_change: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetPurchaseWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetPurchaseWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_purchase";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_purchase";
        };
        IdentifiableAssetSaleWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            proceeds_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            sale_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetSaleWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetSaleWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_sale";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_sale";
        };
        IdentifiableAssetTradeWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            incoming_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            outgoing_entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetTradeWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetTradeWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_trade";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_trade";
        };
        IdentifiableAssetTransferInWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_in";
        };
        IdentifiableAssetTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableAssetTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableAssetTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_out";
        };
        IdentifiableAssetTypeViewModel: {
            /**
             * Format: int32
             * @description The id of the asset type
             * @example 3
             */
            id: number;
            /**
             * @description The name of the asset type
             * @example Stocks
             */
            name: string;
        };
        IdentifiableAssetViewModel: components["schemas"]["AssetViewModel"] & {
            /**
             * Format: int32
             * @example 1
             */
            asset_id: number;
        };
        IdentifiableCashDividendWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
            /**
             * Format: int32
             * @description An id of a cash asset for which the dividends were paid for.
             */
            origin_asset_id: number;
        };
        IdentifiableCashDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableCashDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_dividend";
        };
        IdentifiableCashTransferInWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableCashTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableCashTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_in";
        };
        IdentifiableCashTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableCashTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableCashTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_out";
        };
        IdentifiableExpandedAccountViewModel: components["schemas"]["ExpandedAccountViewModel"] & {
            /** Format: uuid */
            account_id: string;
        };
        IdentifiableExpandedAssetViewModel: components["schemas"]["ExpandedAssetViewModel"] & {
            /**
             * Format: int32
             * @example 1
             */
            asset_id: number;
        };
        IdentifiableRegularTransactionWithIdentifiableEntriesViewModel: components["schemas"]["IdentifiableTransactionBaseWithIdentifiableEntries"] & {
            /**
             * Format: int32
             * @description Specific bespoke category id.
             */
            category_id: number;
            /** @description Description of the transaction. */
            description?: string | null;
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        IdentifiableRegularTransactionWithIdentifiableEntriesViewModelWithType: components["schemas"]["IdentifiableRegularTransactionWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "regular_transaction";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "regular_transaction";
        };
        IdentifiableTransactionBaseWithIdentifiableEntries: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            /**
             * Format: uuid
             * @description Id representing the full transaction.
             */
            transaction_id?: string | null;
        };
        IdentifiableTransactionFeeViewModel: components["schemas"]["IdentifiableAccountAssetEntryViewModel"] & {
            fee_type: components["schemas"]["TransactionFeeType"];
        };
        IdentifiableTransactionWithIdentifiableEntries: components["schemas"]["IdentifiableRegularTransactionWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableCashTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableCashTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableCashDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetTradeWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetSaleWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetPurchaseWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["IdentifiableAccountFeesWithIdentifiableEntriesViewModelWithType"];
        /** @example {
         *       "password": "BestP4ssword!",
         *       "username": "Einaras"
         *     } */
        LoginDetailsViewModel: {
            /** @description Password. */
            password: string;
            /** @description Username. */
            username: string;
        };
        MandatoryAccountFeesWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAccountFeesWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAccountFeesWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "account_fees";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "account_fees";
        };
        MandatoryAssetBalanceTransferWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            incoming_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            outgoing_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetBalanceTransferWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetBalanceTransferWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_balance_transfer";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_balance_transfer";
        };
        MandatoryAssetDividendWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_dividend";
        };
        MandatoryAssetPurchaseWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            cash_outgoings_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            purchase_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetPurchaseWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetPurchaseWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_purchase";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_purchase";
        };
        MandatoryAssetSaleWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            proceeds_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            sale_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetSaleWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetSaleWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_sale";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_sale";
        };
        MandatoryAssetTradeWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            incoming_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            outgoing_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetTradeWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetTradeWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_trade";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_trade";
        };
        MandatoryAssetTransferInWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_in";
        };
        MandatoryAssetTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryAssetTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryAssetTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_out";
        };
        MandatoryCashDividendWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            /**
             * Format: int32
             * @description An id of a cash asset for which the dividends were paid for.
             */
            origin_asset_id: number;
        };
        MandatoryCashDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryCashDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_dividend";
        };
        MandatoryCashTransferInWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryCashTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryCashTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_in";
        };
        MandatoryCashTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryCashTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryCashTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_out";
        };
        MandatoryIdentifiableAccountAssetEntryViewModel: components["schemas"]["AccountAssetEntryViewModel"] & {
            /**
             * Format: int32
             * @description Id representing a single entry in a transaction.
             */
            entry_id: number;
        };
        MandatoryIdentifiableAccountFeesWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAccountFeesWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAccountFeesWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "account_fees";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "account_fees";
        };
        MandatoryIdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            incoming_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            outgoing_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_balance_transfer";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_balance_transfer";
        };
        MandatoryIdentifiableAssetDividendWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_dividend";
        };
        MandatoryIdentifiableAssetPurchaseWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            cash_outgoings_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            purchase_change: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetPurchaseWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetPurchaseWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_purchase";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_purchase";
        };
        MandatoryIdentifiableAssetSaleWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            proceeds_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            sale_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetSaleWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetSaleWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_sale";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_sale";
        };
        MandatoryIdentifiableAssetTradeWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            incoming_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            outgoing_entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetTradeWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetTradeWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_trade";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_trade";
        };
        MandatoryIdentifiableAssetTransferInWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_in";
        };
        MandatoryIdentifiableAssetTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableAssetTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableAssetTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "asset_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "asset_transfer_out";
        };
        MandatoryIdentifiableCashDividendWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
            /**
             * Format: int32
             * @description An id of a cash asset for which the dividends were paid for.
             */
            origin_asset_id: number;
        };
        MandatoryIdentifiableCashDividendWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableCashDividendWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_dividend";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_dividend";
        };
        MandatoryIdentifiableCashTransferInWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableCashTransferInWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableCashTransferInWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_in";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_in";
        };
        MandatoryIdentifiableCashTransferOutWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableCashTransferOutWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableCashTransferOutWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "cash_transfer_out";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "cash_transfer_out";
        };
        MandatoryIdentifiableRegularTransactionWithIdentifiableEntriesViewModel: components["schemas"]["MandatoryIdentifiableTransactionBaseWithIdentifiableEntries"] & {
            /**
             * Format: int32
             * @description Specific bespoke category id.
             */
            category_id: number;
            /** @description Description of the transaction. */
            description?: string | null;
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryIdentifiableRegularTransactionWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryIdentifiableRegularTransactionWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "regular_transaction";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "regular_transaction";
        };
        MandatoryIdentifiableTransactionBaseWithIdentifiableEntries: components["schemas"]["MandatoryTransactionBaseWithIdentifiableEntries"] & {
            /**
             * Format: uuid
             * @description Id representing the full transaction.
             */
            transaction_id: string;
        };
        MandatoryIdentifiableTransactionFeeViewModel: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"] & {
            fee_type: components["schemas"]["TransactionFeeType"];
        };
        MandatoryIdentifiableTransactionGroupViewModel: components["schemas"]["MandatoryTransactionGroupViewModel"] & {
            /**
             * Format: int32
             * @description Id representing a single entry in a transaction.
             */
            group_id: number;
        };
        MandatoryIdentifiableTransactionWithIdentifiableEntries: components["schemas"]["MandatoryIdentifiableRegularTransactionWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableCashTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableCashTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableCashDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetTradeWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetSaleWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetPurchaseWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAssetBalanceTransferWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryIdentifiableAccountFeesWithIdentifiableEntriesViewModelWithType"];
        MandatoryRegularTransactionWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            /**
             * Format: int32
             * @description Specific bespoke category id.
             */
            category_id: number;
            /** @description Description of the transaction. */
            description?: string | null;
            entry: components["schemas"]["MandatoryIdentifiableAccountAssetEntryViewModel"];
        };
        MandatoryRegularTransactionWithIdentifiableEntriesViewModelWithType: components["schemas"]["MandatoryRegularTransactionWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "regular_transaction";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "regular_transaction";
        };
        MandatoryTransactionBaseWithIdentifiableEntries: {
            /**
             * Format: date-time
             * @description Date when the transaction occured.
             */
            date: string;
            /** @description Any other fees related to the transaction, such as transfer or conversion fees. */
            fees?: components["schemas"]["MandatoryIdentifiableTransactionFeeViewModel"][] | null;
        };
        MandatoryTransactionGroupViewModel: {
            /**
             * Format: int32
             * @description Overall category of whole group
             */
            category_id: number;
            /**
             * Format: date-time
             * @description Unrelated to individual transactions date which represent when the collection of transactions occurred
             */
            date: string;
            /** @description Overall description of whole group */
            description: string;
            /** @description All subtractions grouped into this group */
            transactions: components["schemas"]["MandatoryIdentifiableTransactionWithIdentifiableEntries"][];
        };
        MandatoryTransactionWithIdentifiableEntries: components["schemas"]["MandatoryRegularTransactionWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryCashTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryCashTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryCashDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetTradeWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetSaleWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetPurchaseWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAssetBalanceTransferWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["MandatoryAccountFeesWithIdentifiableEntriesViewModelWithType"];
        MetadataLookupTables: {
            accounts: components["schemas"]["IdentifiableAccountViewModel"][];
            assets: components["schemas"]["IdentifiableAssetViewModel"][];
        };
        PageOfAssetsResultsWithLookupViewModel: {
            lookup_tables: components["schemas"]["AssetLookupTables"];
            /** @description One page of results */
            results: components["schemas"]["GetAssetsLineResponseViewModel"][];
            /**
             * Format: int32
             * @description The total number of results available
             * @example 2203
             */
            total_results: number;
        };
        PageOfIndividualTransactionsWithLookupViewModel: {
            lookup_tables: components["schemas"]["MetadataLookupTables"];
            /** @description One page of results */
            results: components["schemas"]["MandatoryIdentifiableTransactionWithIdentifiableEntries"][];
            /**
             * Format: int32
             * @description The total number of results available
             * @example 2203
             */
            total_results: number;
        };
        PortfolioOverviewViewModel: {
            asset_portfolios: components["schemas"]["AssetPortfolioViewModel"][];
            cash_portfolios: components["schemas"]["CashPortfolioViewModel"][];
        };
        RegularTransactionViewModel: components["schemas"]["TransactionBaseWithEntries"] & {
            /**
             * Format: int32
             * @description Specific bespoke category id.
             */
            category_id: number;
            /** @description Description of the transaction. */
            description?: string | null;
            entry: components["schemas"]["AccountAssetEntryViewModel"];
        };
        RegularTransactionViewModelWithType: components["schemas"]["RegularTransactionViewModel"] & {
            /** @enum {string} */
            type: "regular_transaction";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "regular_transaction";
        };
        RegularTransactionWithIdentifiableEntriesViewModel: components["schemas"]["TransactionBaseWithIdentifiableEntries"] & {
            /**
             * Format: int32
             * @description Specific bespoke category id.
             */
            category_id: number;
            /** @description Description of the transaction. */
            description?: string | null;
            entry: components["schemas"]["IdentifiableAccountAssetEntryViewModel"];
        };
        RegularTransactionWithIdentifiableEntriesViewModelWithType: components["schemas"]["RegularTransactionWithIdentifiableEntriesViewModel"] & {
            /** @enum {string} */
            type: "regular_transaction";
        } & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "regular_transaction";
        };
        SharedAssetPairMetadataViewModel: (components["schemas"]["AssetPairMetadataViewModel"] | null) & {
            /**
             * Format: double
             * @example 27681777
             */
            volume?: number | null;
        };
        TransactionBaseWithEntries: {
            /**
             * Format: date-time
             * @description Date when the transaction occured.
             */
            date: string;
            /** @description Any other fees related to the transaction, such as transfer or conversion fees. */
            fees?: components["schemas"]["TransactionFeeViewModel"][] | null;
        };
        TransactionBaseWithIdentifiableEntries: {
            /**
             * Format: date-time
             * @description Date when the transaction occured.
             */
            date: string;
            /** @description Any other fees related to the transaction, such as transfer or conversion fees. */
            fees?: components["schemas"]["IdentifiableTransactionFeeViewModel"][] | null;
        };
        /** @enum {string} */
        TransactionFeeType: "transaction" | "exchange";
        TransactionFeeViewModel: components["schemas"]["AccountAssetEntryViewModel"] & {
            fee_type: components["schemas"]["TransactionFeeType"];
        };
        TransactionGroupViewModel: {
            /**
             * Format: int32
             * @description Overall category of whole group
             */
            category_id: number;
            /**
             * Format: date-time
             * @description Unrelated to individual transactions date which represent when the collection of transactions occurred
             */
            date: string;
            /** @description Overall description of whole group */
            description: string;
            /** @description All subtractions grouped into this group */
            transactions: components["schemas"]["TransactionWithEntries"][];
        };
        TransactionGroupWithIdentifiableChildrenViewModel: {
            /**
             * Format: int32
             * @description Overall category of whole group
             */
            category_id: number;
            /**
             * Format: date-time
             * @description Unrelated to individual transactions date which represent when the collection of transactions occurred
             */
            date: string;
            /** @description Overall description of whole group */
            description: string;
            /** @description All subtractions grouped into this group */
            transactions: components["schemas"]["IdentifiableTransactionWithIdentifiableEntries"][];
        };
        TransactionWithEntries: components["schemas"]["RegularTransactionViewModelWithType"] | components["schemas"]["CashTransferOutViewModelWithType"] | components["schemas"]["CashTransferInViewModelWithType"] | components["schemas"]["CashDividendViewModelWithType"] | components["schemas"]["AssetTransferOutViewModelWithType"] | components["schemas"]["AssetTransferInViewModelWithType"] | components["schemas"]["AssetTradeViewModelWithType"] | components["schemas"]["AssetSaleViewModelWithType"] | components["schemas"]["AssetPurchaseViewModelWithType"] | components["schemas"]["AssetDividendViewModelWithType"] | components["schemas"]["AssetBalanceTransferViewModelWithType"] | components["schemas"]["AccountFeesViewModelWithType"];
        TransactionWithIdentifiableEntries: components["schemas"]["RegularTransactionWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["CashTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["CashTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["CashDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetTransferOutWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetTransferInWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetTradeWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetSaleWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetPurchaseWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetDividendWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AssetBalanceTransferWithIdentifiableEntriesViewModelWithType"] | components["schemas"]["AccountFeesWithIdentifiableEntriesViewModelWithType"];
        UpdateAccountViewModel: components["schemas"]["AccountViewModel"] & {
            /** Format: int32 */
            liquidity_type: number;
        };
        UpdateAssetPairRequestViewModel: components["schemas"]["UserAssetPairMetadataViewModel"] & Record<string, never>;
        UpdateAssetPairResponseViewModel: components["schemas"]["UserAssetPairMetadataViewModel"] & Record<string, never>;
        UpdateAssetRequestViewModel: components["schemas"]["AssetViewModel"] & {
            /** Format: int32 */
            base_asset_id: number;
        };
        UpdateAssetResponseViewModel: components["schemas"]["AssetViewModel"] & {
            /** Format: int32 */
            base_asset_id: number;
        };
        UpdateIndividualTransactionRequestViewModel: {
            transaction: components["schemas"]["TransactionWithIdentifiableEntries"];
        };
        UpdateIndividualTransactionResponseViewModel: components["schemas"]["MetadataLookupTables"] & {
            transaction: components["schemas"]["MandatoryTransactionWithIdentifiableEntries"];
        };
        UpdateTransactionGroupRequestViewModel: components["schemas"]["TransactionGroupWithIdentifiableChildrenViewModel"] & Record<string, never>;
        UpdateTransactionGroupResponseViewModel: components["schemas"]["MetadataLookupTables"] & {
            group: components["schemas"]["MandatoryTransactionGroupViewModel"];
        };
        UpdateTransactionRequestViewModel: {
            transaction: components["schemas"]["TransactionWithIdentifiableEntries"];
        };
        UpdateTransactionResponseViewModel: components["schemas"]["MetadataLookupTables"] & {
            transaction: components["schemas"]["MandatoryTransactionWithIdentifiableEntries"];
        };
        UserAssetPairMetadataViewModel: {
            exchange: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_account_liquidity_types: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccountLiquidityTypesResponseViewModel"];
                };
            };
        };
    };
    get_account_types: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccountTypesResponseViewModel"];
                };
            };
        };
    };
    search_assets: {
        parameters: {
            query?: {
                /**
                 * @description How many items to return in a single page
                 * @example 10
                 */
                count?: number;
                /**
                 * @description The index in the list of the fist element of the page.
                 * @example 30
                 */
                start?: number;
                /** @description The search query */
                query?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageOfAssetsResultsWithLookupViewModel"];
                };
            };
        };
    };
    get_asset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the shared asset to retrieve. */
                asset_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAssetResponseViewModel"];
                };
            };
        };
    };
    get_asset_pair: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the shared asset to retrieve. */
                asset_id: number;
                /** @description Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAssetPairResponseViewModel"];
                };
            };
        };
    };
    get_asset_pair_rates: {
        parameters: {
            query?: {
                /** @description The range time for which to retrieve the rates for */
                range?: string;
            };
            header?: never;
            path: {
                /** @description Id of the shared asset to retrieve. */
                asset_id: number;
                /** @description Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAssetPairRatesResponseViewModel"];
                };
            };
        };
    };
    post_login_details: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDetailsViewModel"];
            };
        };
        responses: {
            /** @description Authentication successful. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthViewModel"];
                };
            };
        };
    };
    add_account: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique Identifier of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAccountRequestViewModel"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddAccountResponseViewModel"];
                };
            };
        };
    };
    get_accounts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique Identifier of the user. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccountsResponseViewModel"];
                };
            };
        };
    };
    get_account: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique Identifier of the user. */
                user_id: string;
                /** @description Id of the account to retrieve. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAccountResponseViewModel"];
                };
            };
        };
    };
    update_account: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique Identifier of the user. */
                user_id: string;
                /** @description Id of the account to update. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAccountViewModel"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateAccountViewModel"];
                };
            };
        };
    };
    delete_account: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique Identifier of the user. */
                user_id: string;
                /** @description Id of the account to delete. */
                account_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account marked as deactiavted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_custom_asset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which to add the asset to. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAssetRequestViewModel"];
            };
        };
        responses: {
            /** @description User asset added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddAssetResponseViewModel"];
                };
            };
        };
    };
    get_user_asset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the user for which asset belongs to. */
                user_id: string;
                /** @description Id of the user asset to retrieve. */
                asset_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAssetResponseViewModel"];
                };
            };
        };
    };
    put_custom_asset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which to add the asset to. */
                user_id: string;
                /** @description User asset to update. */
                asset_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAssetRequestViewModel"];
            };
        };
        responses: {
            /** @description User asset added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateAssetResponseViewModel"];
                };
            };
        };
    };
    delete_asset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the asset belongs to. */
                user_id: string;
                /** @description The Id of the asset to be deleted. */
                asset_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Asset deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_asset_pair: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Id of the user for which asset belongs to. */
                user_id: string;
                /** @description Id of the user asset to retrieve. */
                asset_id: number;
                /** @description Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUserAssetPairResponseViewModel"];
                };
            };
        };
    };
    delete_asset_pair: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the asset belongs to. */
                user_id: string;
                /** @description The Id of the user asset. */
                asset_id: number;
                /** @description The Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Asset pair deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_user_asset_pair_rates: {
        parameters: {
            query?: {
                /** @description The range time for which to retrieve the rates for */
                range?: string;
            };
            header?: never;
            path: {
                /** @description Id of the user for which asset belongs to. */
                user_id: string;
                /** @description Id of the user asset to retrieve. */
                asset_id: number;
                /** @description Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAssetPairRatesResponseViewModel"];
                };
            };
        };
    };
    post_custom_asset_rates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the asset belongs to. */
                user_id: string;
                /** @description The Id of the user asset. */
                asset_id: number;
                /** @description The Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAssetPairRatesRequestViewModel"];
            };
        };
        responses: {
            /** @description All asset pair rates added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddAssetPairRatesResponseViewModel"];
                };
            };
        };
    };
    delete_asset_pair_rates: {
        parameters: {
            query: {
                /** @description From which timestamp delete the rates inclusive. */
                start_timestamp: string;
                /** @description Until which timestamp delete the rates inclusive. */
                end_timestamp: string;
            };
            header?: never;
            path: {
                /** @description User id for which the asset belongs to. */
                user_id: string;
                /** @description The Id of the user asset. */
                asset_id: number;
                /** @description The Id of the reference asset. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All asset pair rates deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_custom_asset_pair: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which to add the asset to. */
                user_id: string;
                /** @description User asset to update. */
                asset_id: number;
                /** @description User asset to update. */
                reference_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAssetPairRequestViewModel"];
            };
        };
        responses: {
            /** @description User asset added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateAssetPairResponseViewModel"];
                };
            };
        };
    };
    get_networth_history: {
        parameters: {
            query?: {
                /** @description The range time for which to retrieve the sums for */
                range?: string;
                /** @description The default asset id to use for retrieving current value of units. If not provided, the default asset id from the user will be used */
                default_asset_id?: number;
            };
            header?: never;
            path: {
                /** @description User id for who to retrieve net worth history */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Portoflio hisotry calculated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetNetWorthHistoryResponseViewModel"];
                };
            };
        };
    };
    get_holdings: {
        parameters: {
            query?: {
                /** @description Default asset id to use for retrieving current value of units. If not provided, the default asset id from the user will be used */
                default_asset_id?: number | null;
            };
            header?: never;
            path: {
                /** @description User id for who to retrieve holdings */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Portoflio holdings returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetHoldingsResponseViewModel"];
                };
            };
        };
    };
    get_portfolio_overview: {
        parameters: {
            query?: {
                /** @description The default asset id to use for retrieving current value of units. If not provided, the default asset id from the user will be used */
                default_asset_id?: number;
            };
            header?: never;
            path: {
                /** @description User id for who to retrieve net worth history */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Portfolio Overview */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPortfolioOverviewViewModel"];
                };
            };
        };
    };
    get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transaction belongs to. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTransactionsViewModel"];
                };
            };
        };
    };
    "Update an existing transaction.": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transaction belongs to. */
                user_id: string;
                /** @description The id of the specific transaction to be updated. */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTransactionRequestViewModel"];
            };
        };
        responses: {
            /** @description Transaction updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateTransactionResponseViewModel"];
                };
            };
        };
    };
    "Delete an existing transaction.": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transaction belongs to. */
                user_id: string;
                /** @description The id of the transaction to be deleted. */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transaction group belongs to. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTransactionGroupsViewModel"];
                };
            };
        };
    };
    add: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User Id for which to add the transaction group for. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddTransactionGroupRequestViewModel"];
            };
        };
        responses: {
            /** @description Transaction group added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddTransactionGroupResponseViewModel"];
                };
            };
        };
    };
    update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transaction group belongs to. */
                user_id: string;
                /** @description The id of the transaction group which is being updated. */
                group_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTransactionGroupRequestViewModel"];
            };
        };
        responses: {
            /** @description Transaction group updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateTransactionGroupResponseViewModel"];
                };
            };
        };
    };
    "Delete an existing transaction group.": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transaction group belongs to. */
                user_id: string;
                /** @description The Id of the transaction group to be deleted. */
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Transaction deleted successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get: {
        parameters: {
            query?: {
                /**
                 * @description How many items to return in a single page
                 * @example 10
                 */
                count?: number;
                /**
                 * @description The index in the list of the fist element of the page.
                 * @example 30
                 */
                start?: number;
                /** @description The search query */
                query?: string | null;
            };
            header?: never;
            path: {
                /** @description User id for which the transactions group belongs to. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PageOfIndividualTransactionsWithLookupViewModel"];
                };
            };
        };
    };
    add: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User Id for which to add the individual transaction for. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddIndividualTransactionRequestViewModel"];
            };
        };
        responses: {
            /** @description Individual transaction added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddIndividualTransactionResponseViewModel"];
                };
            };
        };
    };
    get_single: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the transactions group belongs to. */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetIndividualTransactionViewModel"];
                };
            };
        };
    };
    "Update an existing individual transaction.": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User id for which the individual transaction belongs to. */
                user_id: string;
                /** @description The id of the specific individual transaction which is being updated. */
                transaction_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateIndividualTransactionRequestViewModel"];
            };
        };
        responses: {
            /** @description Individual transaction updated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateIndividualTransactionResponseViewModel"];
                };
            };
        };
    };
}
